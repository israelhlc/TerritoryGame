<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BuildingProducedGameElement" xml:space="preserve">
    <value>Building {0} finished the production of {1}.</value>
    <comment>Used when a building finished the production of a game element</comment>
  </data>
  <data name="DateTimeFormat" xml:space="preserve">
    <value>yyyy-MM-dd HH:mm:ss</value>
    <comment>The format to display Date/Time in the game log</comment>
  </data>
  <data name="GameOver" xml:space="preserve">
    <value>Game Over.</value>
    <comment>Used when the game is over</comment>
  </data>
  <data name="GameWonBy" xml:space="preserve">
    <value>Player {0} won the game.</value>
    <comment>Used to log the player who won the game</comment>
  </data>
  <data name="PlayerAttackedAt" xml:space="preserve">
    <value>Player {0} attacked at {1} with the unit {2}.</value>
    <comment>Used when the player has attacked another tile wit an unit</comment>
  </data>
  <data name="PlayerCreatedBuilding" xml:space="preserve">
    <value>Player {0} created the building {1} with the unit {2}.</value>
    <comment>Used when the player has created a building</comment>
  </data>
  <data name="PlayerEliminated" xml:space="preserve">
    <value>Player {0} was eliminated from the game.</value>
    <comment>Used when a player was eliminated from the game</comment>
  </data>
  <data name="PlayerEndedTurn" xml:space="preserve">
    <value>Player {0} ended turn.</value>
    <comment>Used when the player has sent the EndTurn command</comment>
  </data>
  <data name="PlayerEquippedUnitWith" xml:space="preserve">
    <value>Player {0} equipped unit {1} with the item {2}.</value>
    <comment>Used when the player has equipped an unit with an item</comment>
  </data>
  <data name="PlayerInfluencedAt" xml:space="preserve">
    <value>Player {0} influenced at {1} with the unit {2}.</value>
    <comment>Used when the player has influenced another tile with an unit</comment>
  </data>
  <data name="PlayerMovedUnitTo" xml:space="preserve">
    <value>Player {0} moved the unit {1} to {2}.</value>
    <comment>Used when the player has moved an unit to another tile</comment>
  </data>
  <data name="PlayerSetProductionOf" xml:space="preserve">
    <value>Player {0} set production of {1} in the building {2}.</value>
    <comment>Used when the player has set the a new production in a building</comment>
  </data>
  <data name="PlayerTurnTimeout" xml:space="preserve">
    <value>Player {0} lost its turn due to timeout.</value>
    <comment>Used when a player lost a turn due to timeou</comment>
  </data>
  <data name="UnitAttackedAndDamaged" xml:space="preserve">
    <value>Unit {0} attacked the unit {1} at {2}, damaged it by {3} and was damaged back by {4}.</value>
    <comment>Used when an unit attacked and damaged another unit</comment>
  </data>
  <data name="UnitDestroyedBuilding" xml:space="preserve">
    <value>Unit {0} destroyed the building {1} at {2}.</value>
    <comment>Used when an unit destroyed a building while movint to a tile</comment>
  </data>
  <data name="UnitDied" xml:space="preserve">
    <value>Unit {0} died in the battle.</value>
    <comment>Used when an unit dies in the battle</comment>
  </data>
  <data name="UnitInfluencedTerritory" xml:space="preserve">
    <value>Unit {0} influenced the territory at {1} by {2}.</value>
    <comment>Used when an unit influenced a territory</comment>
  </data>
</root>